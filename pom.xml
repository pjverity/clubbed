<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>uk.co.vhome</groupId>
	<artifactId>rmj</artifactId>
	<packaging>war</packaging>
	<version>0.1.0-SNAPSHOT</version>

	<name>Reigate Mens Joggers</name>

	<url>http://www.reigatemensjoggers.co.uk</url>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>4.3.2.RELEASE</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>org.springframework.security</groupId>
				<artifactId>spring-security-bom</artifactId>
				<version>4.1.1.RELEASE</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-bom</artifactId>
				<version>2.6.2</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!--
			Basic Servlet API that is provided by the Web container at runtime. The API is used to configure the Servlet at bootstrapping.
		-->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>

		<!--
			A JPA implementation used for persistence. JPA (Java Persistence API) is a standardised interface for O/RM providers.
			EclipseLink is the reference implementation of the JPA (p550, p564) org.eclipse.persistence:javax.persistence.
			However, Hibernate is supposedly more widely used, documented and supported (p552). If EclipseLink is preferred,
			exclude Hibernate's hibernate-jpa-2.1-api transient dependency.
		-->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>5.2.1.Final</version>
		</dependency>

		<!--
			Use Springs ORM support to provide a layer of abstraction over the JPA implementation (Hibernate in this case)
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
		</dependency>

		<!--
			Use Spring's MVC framework for developing the UI. It's Dispatcher Servlet takes care of routing requests
			too appropriated annotated POJO's
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>

		<!--
			Core Spring security frameworks for provide the authentication and authorisation services to the application
		-->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-crypto</artifactId>
		</dependency>

		<!--
			Boring logging stuff
		-->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-web</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!--
			Testing frameworks
		-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>rmj</finalName>
		<plugins>

			<!--
				Java 8 is out minimum requirement
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<!--
				Use the Tomcat plugin to deploy the WAR to the server for the world to see!
			-->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<url>http://server.v-home.co.uk:8080/manager/text</url>
					<server>TomcatServer</server>
					<path>/rmj</path>
				</configuration>
			</plugin>

			<!-- Currently no remote repository to deploy artifacts to, so configure the plugin to skip deployment -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
